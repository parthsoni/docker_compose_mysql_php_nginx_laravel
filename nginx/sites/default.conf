##
# You should look at the following URL's in order to grasp a solid understanding
# of Nginx configuration files in order to fully unleash the power of Nginx.
# http://wiki.nginx.org/Pitfalls
# http://wiki.nginx.org/QuickStart
# http://wiki.nginx.org/Configuration
#
# Generally, you will want to move this file somewhere, and start with a clean
# file but keep this around for reference. Or just disable in sites-enabled.
#
# Please see /usr/share/doc/nginx-doc/examples/ for more detailed examples.
##

# Default server configuration
#

server {
	listen 80;
	listen [::]:80;
        listen 443   ssl;
        listen [::]:443 ssl;
	ssl_certificate /etc/nginx/ssl/default.crt;
        ssl_certificate_key /etc/nginx/ssl/default.key;
        # SSL configuration
	#
	# listen 443 ssl default_server;
	# listen [::]:443 ssl default_server;
	#
	# Note: You should disable gzip for SSL traffic.
	# See: https://bugs.debian.org/773332
	#
	# Read up on ssl_ciphers to ensure a secure configuration.
	# See: https://bugs.debian.org/765782
	#
	# Self signed certs generated by the ssl-cert package
	# Don't use them in a production server!
	#
	# include snippets/snakeoil.conf;

        root /var/www/api/public;
	# Add index.php to the list if you are using PHP
	index index.html index.htm index.nginx-debian.html index.php;
        error_log       /var/log/nginx/bimamall.log;


	server_name _;

        
	gzip on;
        gzip_static on; 
	gzip_disable "msie6";
	gzip_vary on;
	gzip_proxied any;
	gzip_comp_level 6;
	gzip_buffers 16 8k;
	gzip_http_version 1.1;
	gzip_min_length 256;
	gzip_types  text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript application/vnd.ms-fontobject application/x-font-ttf font/opentype image/svg+xml image/bmp  image/x-icon;

	location / {
  	# First attempt to serve request as file, then
         try_files $uri /index.html;	
        # as directory, then fall back to displaying a 404.
	}


      location ^~ /api {
         
alias /var/www/api/public;
          # First attempt to serve request as file, then
          # as directory, then fall back to displaying a 404.
          # cors configuration
          try_files $uri $uri/ @api;
          location ~ \.php {
           fastcgi_pass php-upstream;
        fastcgi_index index.php;
        fastcgi_buffers 16 16k;
        fastcgi_buffer_size 32k;
        fastcgi_read_timeout 600;
        include fastcgi_params;
          fastcgi_split_path_info ^(.+\.php)(.*)$;
          fastcgi_param SCRIPT_FILENAME /var/www/api/public/index.php;
add_header 'Access-Control-Allow-Origin' "*" always;
          # if the request included an Origin: header with an origin on the whitelist,
    # then it is some kind of CORS request.
    # specifically, this example allow CORS requests from
    #  scheme    : http or https
    #  authority : any authority ending in "mckinsey.com"
    #  port      : nothing, or :<any_number>
        set $cors "true";

    # Nginx doesn't support nested If statements, so we use string
    # concatenation to create a flag for compound conditions

    # OPTIONS indicates a CORS pre-flight request
    if ($request_method = 'OPTIONS') {
        set $cors "${cors}options";  
    }

    # non-OPTIONS indicates a normal CORS request
    if ($request_method = 'GET') {
        set $cors "${cors}get";  
    }
    if ($request_method = 'POST') {
        set $cors "${cors}post";
    }
if ($request_method = 'PUT') {
        set $cors "${cors}put";
    }




    # if it's a GET or POST, set the standard CORS responses header
    if ($cors = "trueget") {
        # Tells the browser this origin may make cross-origin requests
        # (Here, we echo the requesting origin, which matched the whitelist.)
        add_header 'Access-Control-Allow-Origin' "*" always;
        # Tells the browser it may show the response, when XmlHttpRequest.withCredentials=true.
        # # Tell the browser which response headers the JS can see, besides the "simple response headers"
        # add_header 'Access-Control-Expose-Headers' 'myresponseheader';
         add_header 'Content-Type' 'application/json';
    }

    if ($cors = "truepost") {
        # Tells the browser this origin may make cross-origin requests
        # (Here, we echo the requesting origin, which matched the whitelist.)
        add_header 'Access-Control-Allow-Origin' "*" always;
        # Tells the browser it may show the response, when XmlHttpRequest.withCredentials=true.
        # # Tell the browser which response headers the JS can see
        # add_header 'Access-Control-Expose-Headers' 'myresponseheader';
    }




 
if ($cors = "trueput") {
        # Tells the browser this origin may make cross-origin requests
        # (Here, we echo the requesting origin, which matched the whitelist.)
        add_header 'Access-Control-Allow-Origin' "*" always;
        # Tells the browser it may show the response, when XmlHttpRequest.withCredentials=true.
        # # Tell the browser which response headers the JS can see
        # add_header 'Access-Control-Expose-Headers' 'myresponseheader';
    }





    # if it's OPTIONS, for a CORS preflight request, then respond immediately with no response body
    if ($cors = "trueoptions") {
        # Tells the browser this origin may make cross-origin requests
        # (Here, we echo the requesting origin, which matched the whitelist.)
        add_header 'Access-Control-Allow-Origin' "*" always;
        # in a preflight response, tells browser the subsequent actual request can include user credentials (e.g., cookies)

        #
        # Return special preflight info
        #
        
        # Tell browser to cache this pre-flight info for 20 days
        add_header 'Access-Control-Max-Age' 1728000;

        # Tell browser we respond to GET,POST,OPTIONS in normal CORS requests.
        #
        # Not officially needed but still included to help non-conforming browsers.
        #
        # OPTIONS should not be needed here, since the field is used
        # to indicate methods allowed for "actual request" not the
        # preflight request.
        #
        # GET,POST also should not be needed, since the "simple
        # methods" GET,POST,HEAD are included by default.
        #
        # We should only need this header for non-simple requests
        # methods (e.g., DELETE), or custom request methods (e.g., XMODIFY)
        add_header 'Access-Control-Allow-Methods' 'GET, POST, OPTIONS, PUT' always;
        
        # official specs imply this should not be necessary.
        # 
        add_header 'Access-Control-Allow-Headers' 'Authorization,Content-Type,Accept,Origin,User-Agent,DNT,Cache-Control,X-Mx-ReqToken,Keep-Alive,X-Requested-With,If-Modified-Since';

        # build entire response to the preflight request
        # no body in this response
        add_header 'Content-Length' 0;
        # (should not be necessary, but included for non-conforming browsers)
        add_header 'Content-Type' 'text/plain charset=UTF-8';
        # indicate successful return with no content
        return 204;
    }  


         }  



	 }
     location @api {
        rewrite ^/api/(.*)$ /api/index.php/$1 last; # THIS IS THE IMPORTANT LINE
    }

#        location ~ \.php$ {
 #      include snippets/fastcgi-php.conf;
  #      fastcgi_pass unix:/run/php/php7.1-fpm.sock;
   #     }
    
       location @extensionless-php {
           rewrite ^(.*)$ $1.php last;
       }

	# deny access to .htaccess files, if Apache's document root
	# concurs with nginx's one
	#
	location ~ /\.ht {
		deny all;
	}

        location ~*  \.(jpg|jpeg|png|gif|ico|css|js|pdf)$ {
    expires 7d;
}
}


# Virtual Host configuration for example.com
#
# You can move that to a different file under sites-available/ and symlink that
# to sites-enabled/ to enable it.
#
#server {
#	listen 80;
#	listen [::]:80;
#
#	server_name example.com;
#
#	root /var/www/example.com;
#	index index.html;
#
#	location / {
#		try_files $uri $uri/ =404;
#	}
#}
